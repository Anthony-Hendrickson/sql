<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/Anthony_Hendrickson/Desktop/DSI/Python_fork/sql/05_sql/farmersmarket.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="4339"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,5:mainbooth"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="booth" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="103"/><column index="2" value="124"/><column index="3" value="300"/><column index="4" value="84"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">-- COALESCE
/* 1. Our favourite manager wants a detailed long list of products, but is afraid of tables! 
We tell them, no problem! We can produce a list with all of the appropriate details. 

Using the following syntax you create our super cool and not at all needy manager a list:
*/

--SELECT 
--product_name || ', ' || IFNULL(product_size,'')|| ' (' || IFNULL(product_qty_type,'unit') || ')' AS List

--FROM product

--I don't understand how coalesce would be useful here. We are able to create the list without it by making 2 edits.
--Can you include the correct SQL query in your pull approval message?

/*
But wait! The product table has some bad data (a few NULL values). 
Find the NULLs and then using COALESCE, replace the NULL with a 
blank for the first problem, and 'unit' for the second problem. 

HINT: keep the syntax the same, but edited the correct components with the string. 
The `||` values concatenate the columns into strings. 
Edit the appropriate columns -- you're making two edits -- and the NULL rows will be fixed. 
All the other rows will remain the same.) */




--Windowed Functions
/* 1. Write a query that selects from the customer_purchases table and numbers each customer’s  
visits to the farmer’s market (labeling each market date with a different number). 
Each customer’s first visit is labeled 1, second visit is labeled 2, etc. 
*/

--SELECT customer_id,market_date,
--ROW_NUMBER() OVER(ORDER BY customer_id, market_date) AS visit_number
--FROM customer_purchases
--GROUP BY market_date
--ORDER BY customer_id

/*
You can either display all rows in the customer_purchases table, with the counter changing on
each new market date for each customer, or select on
ly the unique market dates per customer 
(without purchase details) and number those visits. 
HINT: One of these approaches uses ROW_NUMBER() and one uses DENSE_RANK().


/* 2. Reverse the numbering of the query from a part so each customer’s most recent visit is labeled 1, 
then write another query that uses this one as a subquery (or temp table) and filters the results to 
only the customer’s most recent visit. */

--SELECT customer_id,market_date,
--row_number() OVER(ORDER BY customer_id, market_date DESC) AS visit_number
--FROM customer_purchases
--GROUP BY market_date
--ORDER BY customer_id



/* 3. Using a COUNT() window function, include a value along with each row of the 
customer_purchases table that indicates how many different times that customer has purchased that product_id. */

--SELECT *,
--COUNT(*) OVER(PARTITION BY product_id, customer_id) as times_product_purchased
--FROM customer_purchases

--SELECT product_id, customer_id, count(*)
--FROM customer_purchases
--GROUP BY product_id, customer_id


-- String manipulations
/* 1. Some product names in the product table have descriptions like &quot;Jar&quot; or &quot;Organic&quot;. 
These are separated from the product name with a hyphen. 
Create a column using SUBSTR (and a couple of other commands) that captures these, but is otherwise NULL. 
Remove any trailing or leading whitespaces. Don't just use a case statement for each product! 

| product_name               | description |
|----------------------------|-------------|
| Habanero Peppers - Organic | Organic     |

Hint: you might need to use INSTR(product_name,'-') to find the hyphens. INSTR will help split the column. */

SELECT *, SUBSTR(product_name,0, INSTR(product_name,' - ')+1) AS description
FROM product


/* 2. Filter the query to show any product_size value that contain a number with REGEXP. */

SELECT * 
FROM product
WHERE product_size REGEXP '^[0-9]'

-- UNION
/* 1. Using a UNION, write a query that displays the market dates with the highest and lowest total sales.

HINT: There are a possibly a few ways to do this query, but if you're struggling, try the following: 
1) Create a CTE/Temp Table to find sales values grouped dates; 
2) Create another CTE/Temp table with a rank windowed function on the previous query to create 
&quot;best day&quot; and &quot;worst day&quot;; 
3) Query the second temp table twice, once for the best day, once for the worst day, 
with a UNION binding them. */

DROP TABLE IF EXISTS temp.sales_values_grouped_dates;
DROP TABLE IF EXISTS temp.best_worst_day;
CREATE TEMP TABLE IF NOT EXISTS temp.sales_values_grouped_dates AS
SELECT market_date, cost_to_customer_per_qty*quantity
FROM customer_purchases</sql><current_tab id="0"/></tab_sql></sqlb_project>
